
/* eslint-disable @typescript-eslint/naming-convention */
/*
 * ######################################################################
 * #                                                                    #
 * #                       Do not change the file!                      #
 * #                                                                    #
 * # All changes are deleted the next time the collection data is read. #
 * #                                                                    #
 * ######################################################################
 */

{{#withMultipleConnection}}
import { Connection, Schema } from 'mongoose';
{{/withMultipleConnection}}
{{^withMultipleConnection}}
import { model, Schema } from 'mongoose';
{{/withMultipleConnection}}
import { {{collectionNameLower}}Definitions, {{collectionNameLower}}Indexes } from '../documents/{{collectionNameLower}}';
import { addIndexes, addVirtualProperties, checkDuplicateKeys } from '../helper';
import { {{collectionNameUpper}}Document, {{collectionNameUpper}}Model } from '../types/{{collectionNameLower}}';
import add{{collectionNameUpper}}Hooks from '../hooks/{{collectionNameLower}}';
import { methods, options, queries, statics, virtuals } from '../repositories/{{collectionNameLower}}';

// If a key was found several times, then an error is thrown.
checkDuplicateKeys('{{collectionNameLower}}', [Schema.prototype, {{collectionNameLower}}Definitions, methods, statics, queries, virtuals])

// Create model schema
const schema = new Schema<typeof methods>({{collectionNameLower}}Definitions, options);

schema.methods = { ...methods, ...schema.methods };
schema.statics = { ...statics, ...schema.statics };
schema.query = { ...queries, ...schema.query };

add{{collectionNameUpper}}Hooks(schema.pre.bind(schema), schema.post.bind(schema));

addVirtualProperties(schema, virtuals);
addIndexes(schema, {{collectionNameLower}}Indexes);

{{#withMultipleConnection}}
/**
 * For the multiple database connections
 */
 const connect{{collectionNameUpper}} = (conn: Connection): {{collectionNameUpper}}Model =>
  conn.model<{{collectionNameUpper}}Document, {{collectionNameUpper}}Model>(
    '{{collectionNameUpper}}',
    schema
  );

export default connect{{collectionNameUpper}};
{{/withMultipleConnection}}
{{^withMultipleConnection}}
/**
 * Create the model for the default connection
 */
const {{collectionNameUpper}} = model<{{collectionNameUpper}}Document, {{collectionNameUpper}}Model>(
  '{{collectionNameUpper}}',
  schema,
);

export default {{collectionNameUpper}};
{{/withMultipleConnection}}
