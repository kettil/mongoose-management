/**
 * ######################################################################
 * #                                                                    #
 * #                       Do not change the file!                      #
 * #                                                                    #
 * # All changes are deleted the next time the collection data is read. #
 * #                                                                    #
 * ######################################################################
 */

{{#withMultipleConnection}}
import { Connection, Schema } from 'mongoose';
{{/withMultipleConnection}}
{{^withMultipleConnection}}
import { model, Schema } from 'mongoose';
{{/withMultipleConnection}}

import { {{collectionNameLower}}Definitions, {{collectionNameLower}}Indexes } from '../documents/{{collectionNameLower}}';
import { {{interfaceName}}{{collectionNameUpper}}Document, {{interfaceName}}{{collectionNameUpper}}Model } from '../interfaces/{{collectionNameLower}}';
import { methods, options, queries, statics, virtuals } from '../repositories/{{collectionNameLower}}';

import { addIndexes, addVirtualProperties, checkDuplicateKeys } from '../helper';

// If a key was found several times, then an error is thrown.
checkDuplicateKeys('{{collectionNameLower}}', [Schema.prototype, {{collectionNameLower}}Definitions, methods, statics, queries, virtuals])

// Create model schema
export const {{collectionNameLower}}Schema = new Schema({{collectionNameLower}}Definitions, options);

{{collectionNameLower}}Schema.methods = { ...methods, ...{{collectionNameLower}}Schema.methods };
{{collectionNameLower}}Schema.statics = { ...statics, ...{{collectionNameLower}}Schema.statics };
{{collectionNameLower}}Schema.query = { ...queries, ...{{collectionNameLower}}Schema.query };
addVirtualProperties({{collectionNameLower}}Schema, virtuals);
addIndexes({{collectionNameLower}}Schema, {{collectionNameLower}}Indexes);

{{#withMultipleConnection}}
/**
 * For the multiple database connections
 *
 * @param conn
 */
 const connect{{collectionNameUpper}}Model = (conn: Connection) => {
  return conn.model<{{interfaceName}}{{collectionNameUpper}}Document, {{interfaceName}}{{collectionNameUpper}}Model>(
    '{{collectionNameUpper}}',
    {{collectionNameLower}}Schema
  );
};

export default connect{{collectionNameUpper}}Model;
{{/withMultipleConnection}}
{{^withMultipleConnection}}
/**
 * Create the model for the default connection
 */
const {{collectionNameUpper}}Model = model<{{interfaceName}}{{collectionNameUpper}}Document, {{interfaceName}}{{collectionNameUpper}}Model>(
  '{{collectionNameUpper}}',
  {{collectionNameLower}}Schema,
);

export default {{collectionNameUpper}}Model;
{{/withMultipleConnection}}
